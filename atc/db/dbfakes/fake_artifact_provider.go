// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeArtifactProvider struct {
	CreateArtifactStub        func(string) (db.WorkerArtifact, error)
	createArtifactMutex       sync.RWMutex
	createArtifactArgsForCall []struct {
		arg1 string
	}
	createArtifactReturns struct {
		result1 db.WorkerArtifact
		result2 error
	}
	createArtifactReturnsOnCall map[int]struct {
		result1 db.WorkerArtifact
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifactProvider) CreateArtifact(arg1 string) (db.WorkerArtifact, error) {
	fake.createArtifactMutex.Lock()
	ret, specificReturn := fake.createArtifactReturnsOnCall[len(fake.createArtifactArgsForCall)]
	fake.createArtifactArgsForCall = append(fake.createArtifactArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateArtifact", []interface{}{arg1})
	fake.createArtifactMutex.Unlock()
	if fake.CreateArtifactStub != nil {
		return fake.CreateArtifactStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createArtifactReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtifactProvider) CreateArtifactCallCount() int {
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	return len(fake.createArtifactArgsForCall)
}

func (fake *FakeArtifactProvider) CreateArtifactCalls(stub func(string) (db.WorkerArtifact, error)) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = stub
}

func (fake *FakeArtifactProvider) CreateArtifactArgsForCall(i int) string {
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	argsForCall := fake.createArtifactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeArtifactProvider) CreateArtifactReturns(result1 db.WorkerArtifact, result2 error) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = nil
	fake.createArtifactReturns = struct {
		result1 db.WorkerArtifact
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactProvider) CreateArtifactReturnsOnCall(i int, result1 db.WorkerArtifact, result2 error) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = nil
	if fake.createArtifactReturnsOnCall == nil {
		fake.createArtifactReturnsOnCall = make(map[int]struct {
			result1 db.WorkerArtifact
			result2 error
		})
	}
	fake.createArtifactReturnsOnCall[i] = struct {
		result1 db.WorkerArtifact
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifactProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtifactProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ArtifactProvider = new(FakeArtifactProvider)
